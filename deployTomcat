#/bin/bash

#
# The intention of this script is to deploy elis monolith to tomcat outside of an IDE. WIP!!!!
#



# check if ELIS_HOME exists
"${ELIS_HOME?Your ELIS_HOME environment variable is not set. Please set it to your elis-apps directory.}"

export TOMCAT_HOME=/Library/Tomcat
export JAVA_OPTS="-Daws.s3.httpproxy.enabled=true -Xss512m -Xmx5120m -Dtls.key.store=/usr/local/keystore/JavaKeyStore.jks  -Dtls.trusted.store=/usr/local/keystore/JavaKeyStore.jks -Dawsmock.directory=$HOME/elis/s3-mock"

PAYGOV_MOCK_PATH="Mock/PayGovMock"
ELIS_MOCK_SERVICES_PATH="Mock/ELISMockServices"
LOCKBOX_PATH="EIP/LockboxIntegration"
METIS_PATH="Shared/Metis"
EXTERNAL_API_PATH="Backend/ExternalAPI"
INTERNAL_APP_PATH="InternalApp/InternalApp"
I90_PATH="FormI90/I90App"

# Current file
DEPLOY_FILE=$ELIS_HOME/Workspace/deploy-to-tomcat.sh

# Path to built war
WAR_PATH="build/libs"

function launch_terminal {
     command=$1
     osascript -e "tell app \"Terminal\"
         do script \"$command\"
     end tell"
 }
 
 function launch_terminal_die {
     launch_terminal "$1 && exit"
 }
 
function killCatalina () {
    ${TOMCAT_HOME}/bin/shutdown.sh
    CATALINA_PROCESS="$(ps -ef |grep -i 'catalina' | cut -d " " -f 2 | sed -n 1p)"
    kill -9 ${CATALINA_PROCESS}
}

function wipeCatalina () {
    rm -rf ${TOMCAT_HOME}/webapps/
    rm -rf ${ELIS_HOME}/.gradle/2.2.1/*   
    rm ${TOMCAT_HOME}/logs/catalina.out
}

function startVagrant () {
    cd $ELIS_HOME
    vagrant up
}

function baselineDb () {
    cd ${ELIS_HOME}/Database
    BUILD_STATUS=$(buildAndRetryWar "gradle baseline update -Ptoggle=ALL_ON")
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        cd ${ELIS_HOME}/Shared/DataLoader 
        gradle clean build loadBasicFTData loadBasicInternalUserFTData 
    fi
}

function deployMetis () {
    cd ${ELIS_HOME}/${METIS_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war")
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        mv ${WAR_PATH}/Metis.war ${WAR_PATH}/metis.war
        copyWarToTomcat ${METIS_PATH}
    fi
}

function deployPaygovMock () {
    cd ${ELIS_HOME}/${PAYGOV_MOCK_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war" 35)
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        mv ${WAR_PATH}/PayGovMock.war ${WAR_PATH}/paygovmock.war
        copyWarToTomcat ${PAYGOV_MOCK_PATH}
    fi
}

function deployMockServices () {
    cd ${ELIS_HOME}/${ELIS_MOCK_SERVICES_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war" 120)
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        copyWarToTomcat ${ELIS_MOCK_SERVICES_PATH}
    fi
}

function deployExternalApi () {
    cd ${ELIS_HOME}/${EXTERNAL_API_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war" 70)
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        copyWarToTomcat ${EXTERNAL_API_PATH}
    fi
}

function deployLockbox () {
    cd ${ELIS_HOME}/${LOCKBOX_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war" 45)
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        copyWarToTomcat ${LOCKBOX_PATH}
    fi
}

function deployI90App () {
    cd ${ELIS_HOME}/${I90_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean war" 10) 
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
        mv ${WAR_PATH}/I90App.war ${WAR_PATH}/efile.war
        wait
        copyWarToTomcat ${I90_PATH}
    fi
}

function deployInternalApp () {
    cd ${ELIS_HOME}/${INTERNAL_APP_PATH}
    BUILD_STATUS=$(buildAndRetryWar "gradle clean -x karma -x test -x intTest -x installGulp war" 20)                      
    if [[ $BUILD_STATUS  == *"pass"* ]] ; then
       copyWarToTomcat ${INTERNAL_APP_PATH}
    fi
}

function buildAndRetryWar () {
    $1
    if [ $? -ne 0 ] ; then
        echo "First attempt at building ${FUNCNAME[0]} failed. Trying again..."
        sleep $2
        $1
    else 
        echo "pass"
    fi
    if [ $? -ne 0 ] ; then
        echo "Second attempt at building ${FUNCNAME[0]} failed... Trying one more time."
        $1
        sleep $2
    else
        echo "pass"
    fi
    if [ $? -ne 0 ] ; then
        echo "Final attempt at building ${FUNCNAME[0]} failed... You can always try running this again by running: ${FUNCNAME[0]}."
    fi
}

function copyWarToTomcat () {
    mkdir -p ${TOMCAT_HOME}/webapps
    local foundWar=`ls $ELIS_HOME/$1/$WAR_PATH/*.war` 
    echo "Found $foundWar. Copying to tomcat."
    cp ${ELIS_HOME}/$1/${WAR_PATH}/*.war ${TOMCAT_HOME}/webapps
    cat <<  "EOF" 

        _        _                   _              _             _           _           _        
       / /\     /\_\               /\ \           /\ \           /\ \        / /\        / /\      
      / /  \   / / /         _    /  \ \         /  \ \         /  \ \      / /  \      / /  \     
     / / /\ \__\ \ \__      /\_\ / /\ \ \       / /\ \ \       / /\ \ \    / / /\ \__  / / /\ \__  
    / / /\ \___\\ \___\    / / // / /\ \ \     / / /\ \ \     / / /\ \_\  / / /\ \___\/ / /\ \___\ 
    \ \ \ \/___/ \__  /   / / // / /  \ \_\   / / /  \ \_\   / /_/_ \/_/  \ \ \ \/___/\ \ \ \/___/ 
     \ \ \       / / /   / / // / /    \/_/  / / /    \/_/  / /____/\      \ \ \       \ \ \       
 _    \ \ \     / / /   / / // / /          / / /          / /\____\/  _    \ \ \  _    \ \ \      
/_/\__/ / /    / / /___/ / // / /________  / / /________  / / /______ /_/\__/ / / /_/\__/ / /      
\ \/___/ /    / / /____\/ // / /_________\/ / /_________\/ / /_______\\ \/___/ /  \ \/___/ /       
 \_____\/     \/_________/ \/____________/\/____________/\/__________/ \_____\/    \_____\/     
EOF

}

function waitForWarsAndPromptToProceed () {
    # wait a max of 21 mins for this process to finish
    local fullTime=1260
    local currentTimeTaken=0 
    local numberOfWars=`ls -1 $TOMCAT_HOME/webapps/*.war| wc -l | tr -d '[:space:]'`

    echo "If for some reason, building a project fails, you can always try rebuilding that project by re-running the failed build in a new terminal window. Usually this failure is just a timing issue and can be rectified by rebuilding the failed project."    

    while [ $currentTimeTaken -le $fullTime -a $numberOfWars -lt 3 ] ; do
        sleep 45
        ((currentTimeTaken+=45))
        numberOfWars=`ls -1 $TOMCAT_HOME/webapps/*.war | wc -l`
        numberOfWars=$(($numberOfWars + 0))
        local remainingWars=`expr 3 - $numberOfWars`
        local createdWars=`ls -1 $TOMCAT_HOME/webapps/*.war | rev | cut -d'/' -f-1 | rev`
        echo "Have the following projects created:" 
        echo "$createdWars"
        echo "Waiting for $remainingWars more projects to be built..."
        # Need to do this count again so the while loop catches it.
        numberOfWars=`ls -1 $TOMCAT_HOME/webapps/*.war | wc -l`
        numberOfWars=$(($numberOfWars + 0))
    done

    if [[ $numberOfWars -eq 3 ]] ; then
        
        echo "Please hit enter as soon as all of the terminal windows are closed or say Process Completed. This will then start the tomcat server."
        read PROCEED
        ${TOMCAT_HOME}/bin/catalina.sh run
    else 
        echo "All of the necessary wars were not created. Aborting."
    fi
}

function deployAll () {
    killCatalina
    wipeCatalina
    sleep 30
    launch_terminal_die "bash $DEPLOY_FILE deployInternalApp"
    echo "Building Internal App."
    sleep 250
    launch_terminal_die "bash $DEPLOY_FILE deployMockServices"
    echo "Building Mock Services."
    sleep 30
    launch_terminal_die "bash $DEPLOY_FILE deployLockbox"
    echo "Building Lockbox."
    sleep 45
    waitForWarsAndPromptToProceed 
}

$@

